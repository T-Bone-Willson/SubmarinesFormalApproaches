(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "operational" defined at submarinesubsystem.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__operational
 use import "_gnatprove_standard".Main
 use import "int".Int

 type operational 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = operational, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type operational__ref =
  { mutable operational__content "model_trace:" "name:" : operational }
 
 function operational__ref___projection 
   (a : operational__ref) : operational =
  a.operational__content
 
 meta "model_projection" function operational__ref___projection
 
 meta "inline : no" function operational__ref___projection
 
 val operational__havoc 
   (x : operational__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "operational" defined at submarinesubsystem.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__operational__rep
 use        Submarinesubsystem__operational
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarinesubsystem__operational.operational, 
 predicate in_range = Submarinesubsystem__operational.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "dosomething" defined at submarinesubsystem.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__dosomething
 use import "_gnatprove_standard".Main
 use import "int".Int

 type dosomething 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = dosomething, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type dosomething__ref =
  { mutable dosomething__content "model_trace:" "name:" : dosomething }
 
 function dosomething__ref___projection 
   (a : dosomething__ref) : dosomething =
  a.dosomething__content
 
 meta "model_projection" function dosomething__ref___projection
 
 meta "inline : no" function dosomething__ref___projection
 
 val dosomething__havoc 
   (x : dosomething__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "dosomething" defined at submarinesubsystem.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__dosomething__rep
 use        Submarinesubsystem__dosomething
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarinesubsystem__dosomething.dosomething, 
 predicate in_range = Submarinesubsystem__dosomething.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "airdoorone" defined at submarinesubsystem.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__airdoorone
 use import "_gnatprove_standard".Main
 use import "int".Int

 type airdoorone 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = airdoorone, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type airdoorone__ref =
  { mutable airdoorone__content "model_trace:" "name:" : airdoorone }
 
 function airdoorone__ref___projection 
   (a : airdoorone__ref) : airdoorone =
  a.airdoorone__content
 
 meta "model_projection" function airdoorone__ref___projection
 
 meta "inline : no" function airdoorone__ref___projection
 
 val airdoorone__havoc 
   (x : airdoorone__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "airdoorone" defined at submarinesubsystem.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__airdoorone
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarinesubsystem__airdoorone.airdoorone, 
 predicate in_range = Submarinesubsystem__airdoorone.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "airdoortwo" defined at submarinesubsystem.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__airdoortwo
 use import "_gnatprove_standard".Main
 use import "int".Int

 type airdoortwo 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = airdoortwo, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type airdoortwo__ref =
  { mutable airdoortwo__content "model_trace:" "name:" : airdoortwo }
 
 function airdoortwo__ref___projection 
   (a : airdoortwo__ref) : airdoortwo =
  a.airdoortwo__content
 
 meta "model_projection" function airdoortwo__ref___projection
 
 meta "inline : no" function airdoortwo__ref___projection
 
 val airdoortwo__havoc 
   (x : airdoortwo__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "airdoortwo" defined at submarinesubsystem.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__airdoortwo
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarinesubsystem__airdoortwo.airdoortwo, 
 predicate in_range = Submarinesubsystem__airdoortwo.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "dooronelock" defined at submarinesubsystem.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__dooronelock
 use import "_gnatprove_standard".Main
 use import "int".Int

 type dooronelock 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = dooronelock, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type dooronelock__ref =
  { mutable dooronelock__content "model_trace:" "name:" : dooronelock }
 
 function dooronelock__ref___projection 
   (a : dooronelock__ref) : dooronelock =
  a.dooronelock__content
 
 meta "model_projection" function dooronelock__ref___projection
 
 meta "inline : no" function dooronelock__ref___projection
 
 val dooronelock__havoc 
   (x : dooronelock__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "dooronelock" defined at submarinesubsystem.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__dooronelock
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarinesubsystem__dooronelock.dooronelock, 
 predicate in_range = Submarinesubsystem__dooronelock.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "doortwolock" defined at submarinesubsystem.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__doortwolock
 use import "_gnatprove_standard".Main
 use import "int".Int

 type doortwolock 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = doortwolock, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type doortwolock__ref =
  { mutable doortwolock__content "model_trace:" "name:" : doortwolock }
 
 function doortwolock__ref___projection 
   (a : doortwolock__ref) : doortwolock =
  a.doortwolock__content
 
 meta "model_projection" function doortwolock__ref___projection
 
 meta "inline : no" function doortwolock__ref___projection
 
 val doortwolock__havoc 
   (x : doortwolock__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "doortwolock" defined at submarinesubsystem.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__doortwolock__rep
 use        Submarinesubsystem__doortwolock
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarinesubsystem__doortwolock.doortwolock, 
 predicate in_range = Submarinesubsystem__doortwolock.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "submarine" defined at submarinesubsystem.ads:14, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarinesubsystem__submarine__rep
 use import "_gnatprove_standard".Main
 use        Submarinesubsystem__operational
 use        Submarinesubsystem__operational__rep
 use        Submarinesubsystem__dosomething
 use        Submarinesubsystem__dosomething__rep
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__dooronelock
 use        Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__doortwolock
 use        Submarinesubsystem__doortwolock__rep

 type __split_fields =
  { rec__submarinesubsystem__submarine__goodtogo "model_trace:.2655" "name:GoodToGo" : Submarinesubsystem__operational.operational; rec__submarinesubsystem__submarine__optest "model_trace:.2665" "name:OpTest" : Submarinesubsystem__dosomething.dosomething; rec__submarinesubsystem__submarine__closingone "model_trace:.2675" "name:ClosingOne" : Submarinesubsystem__airdoorone.airdoorone; rec__submarinesubsystem__submarine__closingtwo "model_trace:.2685" "name:ClosingTwo" : Submarinesubsystem__airdoortwo.airdoortwo; rec__submarinesubsystem__submarine__lockingone "model_trace:.2695" "name:LockingOne" : Submarinesubsystem__dooronelock.dooronelock; rec__submarinesubsystem__submarine__lockingtwo "model_trace:.2705" "name:LockingTwo" : Submarinesubsystem__doortwolock.doortwolock }
 
 function __split_fields_GoodToGo__projection "model_trace:.2655" "name:GoodToGo" 
   (a : __split_fields) : Submarinesubsystem__operational.operational =
  a.rec__submarinesubsystem__submarine__goodtogo
 
 meta "model_projection" function __split_fields_GoodToGo__projection
 
 meta "inline : no" function __split_fields_GoodToGo__projection
 
 function __split_fields_OpTest__projection "model_trace:.2665" "name:OpTest" 
   (a : __split_fields) : Submarinesubsystem__dosomething.dosomething =
  a.rec__submarinesubsystem__submarine__optest
 
 meta "model_projection" function __split_fields_OpTest__projection
 
 meta "inline : no" function __split_fields_OpTest__projection
 
 function __split_fields_ClosingOne__projection "model_trace:.2675" "name:ClosingOne" 
   (a : __split_fields) : Submarinesubsystem__airdoorone.airdoorone =
  a.rec__submarinesubsystem__submarine__closingone
 
 meta "model_projection" function __split_fields_ClosingOne__projection
 
 meta "inline : no" function __split_fields_ClosingOne__projection
 
 function __split_fields_ClosingTwo__projection "model_trace:.2685" "name:ClosingTwo" 
   (a : __split_fields) : Submarinesubsystem__airdoortwo.airdoortwo =
  a.rec__submarinesubsystem__submarine__closingtwo
 
 meta "model_projection" function __split_fields_ClosingTwo__projection
 
 meta "inline : no" function __split_fields_ClosingTwo__projection
 
 function __split_fields_LockingOne__projection "model_trace:.2695" "name:LockingOne" 
   (a : __split_fields) : Submarinesubsystem__dooronelock.dooronelock =
  a.rec__submarinesubsystem__submarine__lockingone
 
 meta "model_projection" function __split_fields_LockingOne__projection
 
 meta "inline : no" function __split_fields_LockingOne__projection
 
 function __split_fields_LockingTwo__projection "model_trace:.2705" "name:LockingTwo" 
   (a : __split_fields) : Submarinesubsystem__doortwolock.doortwolock =
  a.rec__submarinesubsystem__submarine__lockingtwo
 
 meta "model_projection" function __split_fields_LockingTwo__projection
 
 meta "inline : no" function __split_fields_LockingTwo__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarinesubsystem__submarine__goodtogo__pred 
   (a : __rep)  =
  true
 
 val rec__submarinesubsystem__submarine__goodtogo_ 
   (a : __rep) : Submarinesubsystem__operational.operational
  requires {  (submarinesubsystem__submarine__goodtogo__pred a) }
  ensures {  (result = a.__split_fields.rec__submarinesubsystem__submarine__goodtogo) }
 
 predicate submarinesubsystem__submarine__optest__pred 
   (a : __rep)  =
  true
 
 val rec__submarinesubsystem__submarine__optest_ 
   (a : __rep) : Submarinesubsystem__dosomething.dosomething
  requires {  (submarinesubsystem__submarine__optest__pred a) }
  ensures {  (result = a.__split_fields.rec__submarinesubsystem__submarine__optest) }
 
 predicate submarinesubsystem__submarine__closingone__pred 
   (a : __rep)  =
  true
 
 val rec__submarinesubsystem__submarine__closingone_ 
   (a : __rep) : Submarinesubsystem__airdoorone.airdoorone
  requires {  (submarinesubsystem__submarine__closingone__pred a) }
  ensures {  (result = a.__split_fields.rec__submarinesubsystem__submarine__closingone) }
 
 predicate submarinesubsystem__submarine__closingtwo__pred 
   (a : __rep)  =
  true
 
 val rec__submarinesubsystem__submarine__closingtwo_ 
   (a : __rep) : Submarinesubsystem__airdoortwo.airdoortwo
  requires {  (submarinesubsystem__submarine__closingtwo__pred a) }
  ensures {  (result = a.__split_fields.rec__submarinesubsystem__submarine__closingtwo) }
 
 predicate submarinesubsystem__submarine__lockingone__pred 
   (a : __rep)  =
  true
 
 val rec__submarinesubsystem__submarine__lockingone_ 
   (a : __rep) : Submarinesubsystem__dooronelock.dooronelock
  requires {  (submarinesubsystem__submarine__lockingone__pred a) }
  ensures {  (result = a.__split_fields.rec__submarinesubsystem__submarine__lockingone) }
 
 predicate submarinesubsystem__submarine__lockingtwo__pred 
   (a : __rep)  =
  true
 
 val rec__submarinesubsystem__submarine__lockingtwo_ 
   (a : __rep) : Submarinesubsystem__doortwolock.doortwolock
  requires {  (submarinesubsystem__submarine__lockingtwo__pred a) }
  ensures {  (result = a.__split_fields.rec__submarinesubsystem__submarine__lockingtwo) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ( ( ((Submarinesubsystem__operational__rep.to_rep a.__split_fields.rec__submarinesubsystem__submarine__goodtogo) = (Submarinesubsystem__operational__rep.to_rep b.__split_fields.rec__submarinesubsystem__submarine__goodtogo)) /\ ((Submarinesubsystem__dosomething__rep.to_rep a.__split_fields.rec__submarinesubsystem__submarine__optest) = (Submarinesubsystem__dosomething__rep.to_rep b.__split_fields.rec__submarinesubsystem__submarine__optest)) ) /\ ((Submarinesubsystem__airdoorone__rep.to_rep a.__split_fields.rec__submarinesubsystem__submarine__closingone) = (Submarinesubsystem__airdoorone__rep.to_rep b.__split_fields.rec__submarinesubsystem__submarine__closingone)) ) /\ ((Submarinesubsystem__airdoortwo__rep.to_rep a.__split_fields.rec__submarinesubsystem__submarine__closingtwo) = (Submarinesubsystem__airdoortwo__rep.to_rep b.__split_fields.rec__submarinesubsystem__submarine__closingtwo)) ) /\ ((Submarinesubsystem__dooronelock__rep.to_rep a.__split_fields.rec__submarinesubsystem__submarine__lockingone) = (Submarinesubsystem__dooronelock__rep.to_rep b.__split_fields.rec__submarinesubsystem__submarine__lockingone)) ) /\ ((Submarinesubsystem__doortwolock__rep.to_rep a.__split_fields.rec__submarinesubsystem__submarine__lockingtwo) = (Submarinesubsystem__doortwolock__rep.to_rep b.__split_fields.rec__submarinesubsystem__submarine__lockingtwo)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "submarine" defined at submarinesubsystem.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Submarinesubsystem__submarine
 use export Submarinesubsystem__submarine__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarine =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : submarine) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : submarine) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : submarine.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : submarine.
   ((object__alignment a) >= 0))
 
 function submarinesubsystem__submarine__goodtogo__first__bit 
   : int
 
 function submarinesubsystem__submarine__goodtogo__last__bit 
   : int
 
 function submarinesubsystem__submarine__goodtogo__position 
   : int
 
 axiom submarinesubsystem__submarine__goodtogo__first__bit_axiom :
  ((submarinesubsystem__submarine__goodtogo__first__bit ) >= 0)
 
 axiom submarinesubsystem__submarine__goodtogo__last__bit_axiom :
  ((submarinesubsystem__submarine__goodtogo__last__bit ) > (submarinesubsystem__submarine__goodtogo__first__bit ))
 
 axiom submarinesubsystem__submarine__goodtogo__position_axiom :
  ((submarinesubsystem__submarine__goodtogo__position ) >= 0)
 
 function submarinesubsystem__submarine__optest__first__bit 
   : int
 
 function submarinesubsystem__submarine__optest__last__bit 
   : int
 
 function submarinesubsystem__submarine__optest__position 
   : int
 
 axiom submarinesubsystem__submarine__optest__first__bit_axiom :
  ((submarinesubsystem__submarine__optest__first__bit ) >= 0)
 
 axiom submarinesubsystem__submarine__optest__last__bit_axiom :
  ((submarinesubsystem__submarine__optest__last__bit ) > (submarinesubsystem__submarine__optest__first__bit ))
 
 axiom submarinesubsystem__submarine__optest__position_axiom :
  ((submarinesubsystem__submarine__optest__position ) >= 0)
 
 function submarinesubsystem__submarine__closingone__first__bit 
   : int
 
 function submarinesubsystem__submarine__closingone__last__bit 
   : int
 
 function submarinesubsystem__submarine__closingone__position 
   : int
 
 axiom submarinesubsystem__submarine__closingone__first__bit_axiom :
  ((submarinesubsystem__submarine__closingone__first__bit ) >= 0)
 
 axiom submarinesubsystem__submarine__closingone__last__bit_axiom :
  ((submarinesubsystem__submarine__closingone__last__bit ) > (submarinesubsystem__submarine__closingone__first__bit ))
 
 axiom submarinesubsystem__submarine__closingone__position_axiom :
  ((submarinesubsystem__submarine__closingone__position ) >= 0)
 
 function submarinesubsystem__submarine__closingtwo__first__bit 
   : int
 
 function submarinesubsystem__submarine__closingtwo__last__bit 
   : int
 
 function submarinesubsystem__submarine__closingtwo__position 
   : int
 
 axiom submarinesubsystem__submarine__closingtwo__first__bit_axiom :
  ((submarinesubsystem__submarine__closingtwo__first__bit ) >= 0)
 
 axiom submarinesubsystem__submarine__closingtwo__last__bit_axiom :
  ((submarinesubsystem__submarine__closingtwo__last__bit ) > (submarinesubsystem__submarine__closingtwo__first__bit ))
 
 axiom submarinesubsystem__submarine__closingtwo__position_axiom :
  ((submarinesubsystem__submarine__closingtwo__position ) >= 0)
 
 function submarinesubsystem__submarine__lockingone__first__bit 
   : int
 
 function submarinesubsystem__submarine__lockingone__last__bit 
   : int
 
 function submarinesubsystem__submarine__lockingone__position 
   : int
 
 axiom submarinesubsystem__submarine__lockingone__first__bit_axiom :
  ((submarinesubsystem__submarine__lockingone__first__bit ) >= 0)
 
 axiom submarinesubsystem__submarine__lockingone__last__bit_axiom :
  ((submarinesubsystem__submarine__lockingone__last__bit ) > (submarinesubsystem__submarine__lockingone__first__bit ))
 
 axiom submarinesubsystem__submarine__lockingone__position_axiom :
  ((submarinesubsystem__submarine__lockingone__position ) >= 0)
 
 function submarinesubsystem__submarine__lockingtwo__first__bit 
   : int
 
 function submarinesubsystem__submarine__lockingtwo__last__bit 
   : int
 
 function submarinesubsystem__submarine__lockingtwo__position 
   : int
 
 axiom submarinesubsystem__submarine__lockingtwo__first__bit_axiom :
  ((submarinesubsystem__submarine__lockingtwo__first__bit ) >= 0)
 
 axiom submarinesubsystem__submarine__lockingtwo__last__bit_axiom :
  ((submarinesubsystem__submarine__lockingtwo__last__bit ) > (submarinesubsystem__submarine__lockingtwo__first__bit ))
 
 axiom submarinesubsystem__submarine__lockingtwo__position_axiom :
  ((submarinesubsystem__submarine__lockingtwo__position ) >= 0)
 
 function user_eq 
   (a : submarine) (b : submarine) : bool
 
 function dummy 
   : submarine
 
 type submarine__ref =
  { mutable submarine__content "model_trace:" "name:" : submarine }
 
 function submarine__ref___projection 
   (a : submarine__ref) : submarine =
  a.submarine__content
 
 meta "model_projection" function submarine__ref___projection
 
 meta "inline : no" function submarine__ref___projection
 
 val submarine__havoc 
   (x : submarine__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "nuclearsubmarine" defined at submarinesubsystem.ads:23, created in Gnat2Why.Decls.Translate_Variable *)
module Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use        Submarinesubsystem__submarine

 val nuclearsubmarine__split_fields #"submarinesubsystem.ads" 23 0 0#"model_projected" "model_trace:2717" "name:NuclearSubmarine"  : Submarinesubsystem__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "nuclearsubmarine" defined at submarinesubsystem.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarinesubsystem__nuclearsubmarine___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "startsubmarine" defined at submarinesubsystem.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarinesubsystem__startsubmarine
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "submarineaction" defined at submarinesubsystem.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarinesubsystem__submarineaction
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "d1close" defined at submarinesubsystem.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarinesubsystem__d1close
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "d2close" defined at submarinesubsystem.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarinesubsystem__d2close
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "d1lock" defined at submarinesubsystem.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarinesubsystem__d1lock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "d2lock" defined at submarinesubsystem.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarinesubsystem__d2lock
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "operational" defined at submarinesubsystem.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__operational___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__operational

 predicate dynamic_invariant "inline" 
   (temp___expr_158 : int) (temp___is_init_154 : bool) (temp___skip_constant_155 : bool) (temp___do_toplevel_156 : bool) (temp___do_typ_inv_157 : bool)  =
  (if (( temp___is_init_154 \/ (Submarinesubsystem__operational.first <= Submarinesubsystem__operational.last) )) then (
   (Submarinesubsystem__operational.dynamic_property Submarinesubsystem__operational.first Submarinesubsystem__operational.last temp___expr_158)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_159 : int) (temp___skip_top_level_160 : bool)  =
  true

end

(* Module giving axioms for type "dosomething" defined at submarinesubsystem.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__dosomething___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__dosomething

 predicate dynamic_invariant "inline" 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool)  =
  (if (( temp___is_init_161 \/ (Submarinesubsystem__dosomething.first <= Submarinesubsystem__dosomething.last) )) then (
   (Submarinesubsystem__dosomething.dynamic_property Submarinesubsystem__dosomething.first Submarinesubsystem__dosomething.last temp___expr_165)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool)  =
  true

end

(* Module giving axioms for type "airdoorone" defined at submarinesubsystem.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__airdoorone___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoorone

 predicate dynamic_invariant "inline" 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool)  =
  (if (( temp___is_init_168 \/ (Submarinesubsystem__airdoorone.first <= Submarinesubsystem__airdoorone.last) )) then (
   (Submarinesubsystem__airdoorone.dynamic_property Submarinesubsystem__airdoorone.first Submarinesubsystem__airdoorone.last temp___expr_172)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool)  =
  true

end

(* Module giving axioms for type "airdoortwo" defined at submarinesubsystem.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__airdoortwo___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoortwo

 predicate dynamic_invariant "inline" 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool)  =
  (if (( temp___is_init_175 \/ (Submarinesubsystem__airdoortwo.first <= Submarinesubsystem__airdoortwo.last) )) then (
   (Submarinesubsystem__airdoortwo.dynamic_property Submarinesubsystem__airdoortwo.first Submarinesubsystem__airdoortwo.last temp___expr_179)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool)  =
  true

end

(* Module giving axioms for type "dooronelock" defined at submarinesubsystem.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__dooronelock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__dooronelock

 predicate dynamic_invariant "inline" 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool)  =
  (if (( temp___is_init_182 \/ (Submarinesubsystem__dooronelock.first <= Submarinesubsystem__dooronelock.last) )) then (
   (Submarinesubsystem__dooronelock.dynamic_property Submarinesubsystem__dooronelock.first Submarinesubsystem__dooronelock.last temp___expr_186)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool)  =
  true

end

(* Module giving axioms for type "doortwolock" defined at submarinesubsystem.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__doortwolock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__doortwolock

 predicate dynamic_invariant "inline" 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool)  =
  (if (( temp___is_init_189 \/ (Submarinesubsystem__doortwolock.first <= Submarinesubsystem__doortwolock.last) )) then (
   (Submarinesubsystem__doortwolock.dynamic_property Submarinesubsystem__doortwolock.first Submarinesubsystem__doortwolock.last temp___expr_193)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool)  =
  true

end

(* Module giving axioms for type "submarine" defined at submarinesubsystem.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarinesubsystem__submarine___axiom
 use import "_gnatprove_standard".Main
 use        Submarinesubsystem__submarine

 predicate dynamic_invariant "inline" 
   (temp___expr_200 : Submarinesubsystem__submarine.submarine) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_201 : Submarinesubsystem__submarine.submarine) (temp___skip_top_level_202 : bool)  =
  true

end
(* Module for declaring a program function (and possibly an axiom) for "startsubmarine" defined at submarinesubsystem.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarinesubsystem__startsubmarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__operational
 use        Submarinesubsystem__operational__rep
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__dooronelock
 use        Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__doortwolock
 use        Submarinesubsystem__doortwolock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine

 val startsubmarine 
   (__void_param : unit) : unit
  requires {  ( ((Submarinesubsystem__operational__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) /\ ( ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ( ((Submarinesubsystem__dooronelock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ( ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ((Submarinesubsystem__doortwolock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) ) ) ) }
  ensures {  ( ((Submarinesubsystem__operational__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True True True True) ) }
  reads {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}
  writes {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "submarineaction" defined at submarinesubsystem.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarinesubsystem__submarineaction___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__operational
 use        Submarinesubsystem__operational__rep
 use        Submarinesubsystem__dosomething
 use        Submarinesubsystem__dosomething__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine

 val submarineaction 
   (__void_param : unit) : unit
  requires {  ((Submarinesubsystem__operational__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) }
  ensures {  ( ((Submarinesubsystem__dosomething__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__optest (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True True True True) ) }
  reads {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}
  writes {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "d1close" defined at submarinesubsystem.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarinesubsystem__d1close___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine

 val d1close 
   (__void_param : unit) : unit
  requires {  ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) }
  ensures {  ( ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True True True True) ) }
  reads {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}
  writes {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "d2close" defined at submarinesubsystem.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarinesubsystem__d2close___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine

 val d2close 
   (__void_param : unit) : unit
  requires {  ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) }
  ensures {  ( ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True True True True) ) }
  reads {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}
  writes {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "d1lock" defined at submarinesubsystem.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarinesubsystem__d1lock___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__dooronelock
 use        Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine

 val d1lock 
   (__void_param : unit) : unit
  requires {  ( ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ((Submarinesubsystem__dooronelock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) ) }
  ensures {  ( ((Submarinesubsystem__dooronelock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True True True True) ) }
  reads {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}
  writes {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "d2lock" defined at submarinesubsystem.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarinesubsystem__d2lock___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__doortwolock
 use        Submarinesubsystem__doortwolock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine

 val d2lock 
   (__void_param : unit) : unit
  requires {  ( ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ((Submarinesubsystem__doortwolock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) ) }
  ensures {  ( ((Submarinesubsystem__doortwolock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True True True True) ) }
  reads {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}
  writes {Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "submarinesubsystem" defined at submarinesubsystem.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Submarinesubsystem__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__operational
 use        Submarinesubsystem__operational__rep
 use        Submarinesubsystem__dosomething
 use        Submarinesubsystem__dosomething__rep
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__dooronelock
 use        Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__doortwolock
 use        Submarinesubsystem__doortwolock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 1 0 0#"GP_Subp:submarinesubsystem.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 1 0 0# true }
  ensures { #"submarinesubsystem.ads" 1 0 0# true }
   =
  ( (#"submarinesubsystem.ads" 1 0 0# ());
  (#"submarinesubsystem.ads" 3 0 0# ());
  (#"submarinesubsystem.ads" 5 0 0# ());
  (#"submarinesubsystem.ads" 7 0 0# ());
  (#"submarinesubsystem.ads" 8 0 0# ());
  (#"submarinesubsystem.ads" 10 0 0# ());
  (#"submarinesubsystem.ads" 11 0 0# ());
  (#"submarinesubsystem.ads" 14 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ());
  (#"submarinesubsystem.ads" 23 0 0# ( (let submarinesubsystem__nuclearsubmarine__assume = { Submarinesubsystem__submarine.__split_fields = { Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo = (Submarinesubsystem__operational__rep.of_rep(1)); Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__optest = (Submarinesubsystem__dosomething__rep.of_rep(1)); Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone = (Submarinesubsystem__airdoorone__rep.of_rep(1)); Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo = (Submarinesubsystem__airdoortwo__rep.of_rep(1)); Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone = (Submarinesubsystem__dooronelock__rep.of_rep(1)); Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo = (Submarinesubsystem__doortwolock__rep.of_rep(1)) } } in (
   #"submarinesubsystem.ads" 23 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(submarinesubsystem__nuclearsubmarine__assume)) )))
  ;
  #"submarinesubsystem.ads" 23 0 0# assume { #"submarinesubsystem.ads" 23 0 0# (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) } ));
  (#"submarinesubsystem.ads" 27 0 0# ());
  (#"submarinesubsystem.ads" 32 0 0# ());
  (#"submarinesubsystem.ads" 29 0 0# ());
  (#"submarinesubsystem.ads" 29 0 0# ());
  (#"submarinesubsystem.ads" 30 0 0# ());
  (#"submarinesubsystem.ads" 30 0 0# ());
  (#"submarinesubsystem.ads" 29 0 0# ());
  (#"submarinesubsystem.ads" 28 0 0# ());
  (#"submarinesubsystem.ads" 34 0 0# ());
  (#"submarinesubsystem.ads" 37 0 0# ());
  (#"submarinesubsystem.ads" 36 0 0# ());
  (#"submarinesubsystem.ads" 35 0 0# ());
  (#"submarinesubsystem.ads" 39 0 0# ());
  (#"submarinesubsystem.ads" 42 0 0# ());
  (#"submarinesubsystem.ads" 41 0 0# ());
  (#"submarinesubsystem.ads" 40 0 0# ());
  (#"submarinesubsystem.ads" 44 0 0# ());
  (#"submarinesubsystem.ads" 47 0 0# ());
  (#"submarinesubsystem.ads" 46 0 0# ());
  (#"submarinesubsystem.ads" 45 0 0# ());
  (#"submarinesubsystem.ads" 49 0 0# ());
  (#"submarinesubsystem.ads" 53 0 0# ());
  (#"submarinesubsystem.ads" 51 0 0# ());
  (#"submarinesubsystem.ads" 51 0 0# ());
  (#"submarinesubsystem.ads" 50 0 0# ());
  (#"submarinesubsystem.ads" 55 0 0# ());
  (#"submarinesubsystem.ads" 59 0 0# ());
  (#"submarinesubsystem.ads" 57 0 0# ());
  (#"submarinesubsystem.ads" 57 0 0# ());
  (#"submarinesubsystem.ads" 56 0 0# ());
  (#"submarinesubsystem.adb" 1 0 0# ());
  (#"submarinesubsystem.adb" 3 0 0# ());
  (#"submarinesubsystem.adb" 10 0 0# ());
  (#"submarinesubsystem.adb" 17 0 0# ());
  (#"submarinesubsystem.adb" 25 0 0# ());
  (#"submarinesubsystem.adb" 33 0 0# ());
  (#"submarinesubsystem.adb" 42 0 0# ());
  ( "GP_Sloc:submarinesubsystem.adb:53:1" (#"submarinesubsystem.adb" 53 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "startsubmarine" defined at submarinesubsystem.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarinesubsystem__startsubmarine__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__operational
 use        Submarinesubsystem__operational__rep
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__dooronelock
 use        Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__doortwolock
 use        Submarinesubsystem__doortwolock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 27 0 0#"W:diverges:N" "GP_Subp:submarinesubsystem.ads:27" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 27 0 0# true }
  ensures { #"submarinesubsystem.ads" 27 0 0# (#"submarinesubsystem.ads" 32 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:submarinesubsystem.ads:32:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post => NuclearSubmarine.GoodToGo = On;
             ^ submarinesubsystem.ads:32:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:3177" "GP_Sloc:submarinesubsystem.ads:32:14" ((Submarinesubsystem__operational__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarinesubsystem.ads:27 *)
  ;
   assume {  (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarinesubsystem.ads:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarinesubsystem.ads:27 *)
  ;
   abstract ensures {true}(let _ = ( ((Submarinesubsystem__operational__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) && ( ((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ( ((Submarinesubsystem__dooronelock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ( ((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ((Submarinesubsystem__doortwolock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarinesubsystem.ads:27 *)
  ;
   assume {  ( ((Submarinesubsystem__operational__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) /\ ( ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ( ((Submarinesubsystem__dooronelock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ( ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ((Submarinesubsystem__doortwolock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) ) ) ) };
   try
   ( ( "GP_Sloc:submarinesubsystem.adb:35:11" (#"submarinesubsystem.adb" 35 0 0# ()) );
   ( "GP_Sloc:submarinesubsystem.adb:35:7" (#"submarinesubsystem.adb" 35 0 0# (if (( ( ( ( ((Submarinesubsystem__operational__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) && ((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) ) && ((Submarinesubsystem__dooronelock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) ) && ((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) ) && ((Submarinesubsystem__doortwolock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) )) then (
    ( ( "GP_Sloc:submarinesubsystem.adb:38:10" (#"submarinesubsystem.adb" 38 0 0# ()) );
    ( "GP_Sloc:submarinesubsystem.adb:38:36" (#"submarinesubsystem.adb" 38 0 0# (let temp___210 = (let temp___209 = { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } in (
     ( #"submarinesubsystem.adb" 38 0 0# abstract ensures {true}(let _ = (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo((Submarinesubsystem__submarine.__split_fields(temp___209)))) in (
      ()))
      end ;
     { ( temp___209 ) with Submarinesubsystem__submarine.__split_fields = { ( (Submarinesubsystem__submarine.__split_fields(temp___209)) ) with Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo = (Submarinesubsystem__operational__rep.of_rep(0)) } } )))
     in (
     #"submarinesubsystem.adb" 38 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(temp___210)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarinesubsystem__operational__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "submarineaction" defined at submarinesubsystem.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarinesubsystem__submarineaction__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__operational
 use        Submarinesubsystem__operational__rep
 use        Submarinesubsystem__dosomething
 use        Submarinesubsystem__dosomething__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 34 0 0#"W:diverges:N" "GP_Subp:submarinesubsystem.ads:34" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 34 0 0# true }
  ensures { #"submarinesubsystem.ads" 34 0 0# (#"submarinesubsystem.ads" 37 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarinesubsystem.ads:37:14" "GP_Id:1" "comment:     Post => NuclearSubmarine.OpTest = Fire;
             ^ submarinesubsystem.ads:37:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3253" "GP_Sloc:submarinesubsystem.ads:37:14" ((Submarinesubsystem__dosomething__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__optest (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarinesubsystem.ads:34 *)
  ;
   assume {  (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarinesubsystem.ads:34 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarinesubsystem.ads:34 *)
  ;
   abstract ensures {true}(let _ = ((Submarinesubsystem__operational__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarinesubsystem.ads:34 *)
  ;
   assume {  ((Submarinesubsystem__operational__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:submarinesubsystem.adb:44:11" (#"submarinesubsystem.adb" 44 0 0# ()) );
   ( "GP_Sloc:submarinesubsystem.adb:44:7" (#"submarinesubsystem.adb" 44 0 0# (if (((Submarinesubsystem__operational__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__goodtogo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0)) then (
    ( ( "GP_Sloc:submarinesubsystem.adb:45:10" (#"submarinesubsystem.adb" 45 0 0# ()) );
    ( "GP_Sloc:submarinesubsystem.adb:45:34" (#"submarinesubsystem.adb" 45 0 0# (let temp___212 = (let temp___211 = { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } in (
     ( #"submarinesubsystem.adb" 45 0 0# abstract ensures {true}(let _ = (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__optest((Submarinesubsystem__submarine.__split_fields(temp___211)))) in (
      ()))
      end ;
     { ( temp___211 ) with Submarinesubsystem__submarine.__split_fields = { ( (Submarinesubsystem__submarine.__split_fields(temp___211)) ) with Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__optest = (Submarinesubsystem__dosomething__rep.of_rep(0)) } } )))
     in (
     #"submarinesubsystem.adb" 45 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(temp___212)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarinesubsystem__dosomething__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__optest((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "d1close" defined at submarinesubsystem.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarinesubsystem__d1close__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 39 0 0#"W:diverges:N" "GP_Subp:submarinesubsystem.ads:39" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 39 0 0# true }
  ensures { #"submarinesubsystem.ads" 39 0 0# (#"submarinesubsystem.ads" 42 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarinesubsystem.ads:42:14" "GP_Id:2" "comment:     Post => NuclearSubmarine.ClosingOne = Closed;
             ^ submarinesubsystem.ads:42:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3301" "GP_Sloc:submarinesubsystem.ads:42:14" ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarinesubsystem.ads:39 *)
  ;
   assume {  (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarinesubsystem.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarinesubsystem.ads:39 *)
  ;
   abstract ensures {true}(let _ = ((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarinesubsystem.ads:39 *)
  ;
   assume {  ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarinesubsystem.adb:5:11" (#"submarinesubsystem.adb" 5 0 0# ()) );
   ( "GP_Sloc:submarinesubsystem.adb:5:7" (#"submarinesubsystem.adb" 5 0 0# (if (((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1)) then (
    ( ( "GP_Sloc:submarinesubsystem.adb:6:10" (#"submarinesubsystem.adb" 6 0 0# ()) );
    ( "GP_Sloc:submarinesubsystem.adb:6:38" (#"submarinesubsystem.adb" 6 0 0# (let temp___214 = (let temp___213 = { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } in (
     ( #"submarinesubsystem.adb" 6 0 0# abstract ensures {true}(let _ = (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields(temp___213)))) in (
      ()))
      end ;
     { ( temp___213 ) with Submarinesubsystem__submarine.__split_fields = { ( (Submarinesubsystem__submarine.__split_fields(temp___213)) ) with Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone = (Submarinesubsystem__airdoorone__rep.of_rep(0)) } } )))
     in (
     #"submarinesubsystem.adb" 6 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(temp___214)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "d2close" defined at submarinesubsystem.ads:44, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarinesubsystem__d2close__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 44 0 0#"W:diverges:N" "GP_Subp:submarinesubsystem.ads:44" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 44 0 0# true }
  ensures { #"submarinesubsystem.ads" 44 0 0# (#"submarinesubsystem.ads" 47 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarinesubsystem.ads:47:14" "GP_Id:3" "comment:     Post => NuclearSubmarine.ClosingTwo = Closed;
             ^ submarinesubsystem.ads:47:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3349" "GP_Sloc:submarinesubsystem.ads:47:14" ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarinesubsystem.ads:44 *)
  ;
   assume {  (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarinesubsystem.ads:44 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarinesubsystem.ads:44 *)
  ;
   abstract ensures {true}(let _ = ((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarinesubsystem.ads:44 *)
  ;
   assume {  ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarinesubsystem.adb:12:11" (#"submarinesubsystem.adb" 12 0 0# ()) );
   ( "GP_Sloc:submarinesubsystem.adb:12:7" (#"submarinesubsystem.adb" 12 0 0# (if (((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1)) then (
    ( ( "GP_Sloc:submarinesubsystem.adb:13:10" (#"submarinesubsystem.adb" 13 0 0# ()) );
    ( "GP_Sloc:submarinesubsystem.adb:13:38" (#"submarinesubsystem.adb" 13 0 0# (let temp___216 = (let temp___215 = { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } in (
     ( #"submarinesubsystem.adb" 13 0 0# abstract ensures {true}(let _ = (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields(temp___215)))) in (
      ()))
      end ;
     { ( temp___215 ) with Submarinesubsystem__submarine.__split_fields = { ( (Submarinesubsystem__submarine.__split_fields(temp___215)) ) with Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo = (Submarinesubsystem__airdoortwo__rep.of_rep(0)) } } )))
     in (
     #"submarinesubsystem.adb" 13 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(temp___216)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "d1lock" defined at submarinesubsystem.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarinesubsystem__d1lock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoorone
 use        Submarinesubsystem__airdoorone__rep
 use        Submarinesubsystem__dooronelock
 use        Submarinesubsystem__dooronelock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 49 0 0#"W:diverges:N" "GP_Subp:submarinesubsystem.ads:49" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 49 0 0# true }
  ensures { #"submarinesubsystem.ads" 49 0 0# (#"submarinesubsystem.ads" 53 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarinesubsystem.ads:53:14" "GP_Id:4" "comment:     Post => NuclearSubmarine.LockingOne = Locked;
             ^ submarinesubsystem.ads:53:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3419" "GP_Sloc:submarinesubsystem.ads:53:14" ((Submarinesubsystem__dooronelock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarinesubsystem.ads:49 *)
  ;
   assume {  (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarinesubsystem.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarinesubsystem.ads:49 *)
  ;
   abstract ensures {true}(let _ = ( ((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ((Submarinesubsystem__dooronelock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarinesubsystem.ads:49 *)
  ;
   assume {  ( ((Submarinesubsystem__airdoorone__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ((Submarinesubsystem__dooronelock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:submarinesubsystem.adb:19:11" (#"submarinesubsystem.adb" 19 0 0# ()) );
   ( "GP_Sloc:submarinesubsystem.adb:19:7" (#"submarinesubsystem.adb" 19 0 0# (if (( ((Submarinesubsystem__airdoorone__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ((Submarinesubsystem__dooronelock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) )) then (
    ( ( "GP_Sloc:submarinesubsystem.adb:21:10" (#"submarinesubsystem.adb" 21 0 0# ()) );
    ( "GP_Sloc:submarinesubsystem.adb:21:38" (#"submarinesubsystem.adb" 21 0 0# (let temp___218 = (let temp___217 = { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } in (
     ( #"submarinesubsystem.adb" 21 0 0# abstract ensures {true}(let _ = (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone((Submarinesubsystem__submarine.__split_fields(temp___217)))) in (
      ()))
      end ;
     { ( temp___217 ) with Submarinesubsystem__submarine.__split_fields = { ( (Submarinesubsystem__submarine.__split_fields(temp___217)) ) with Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone = (Submarinesubsystem__dooronelock__rep.of_rep(0)) } } )))
     in (
     #"submarinesubsystem.adb" 21 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(temp___218)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarinesubsystem__dooronelock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingone((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "d2lock" defined at submarinesubsystem.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarinesubsystem__d2lock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarinesubsystem__airdoortwo
 use        Submarinesubsystem__airdoortwo__rep
 use        Submarinesubsystem__doortwolock
 use        Submarinesubsystem__doortwolock__rep
 use        Submarinesubsystem__submarine
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine
 use        Submarinesubsystem__operational___axiom
 use        Submarinesubsystem__dosomething___axiom
 use        Submarinesubsystem__airdoorone___axiom
 use        Submarinesubsystem__airdoortwo___axiom
 use        Submarinesubsystem__dooronelock___axiom
 use        Submarinesubsystem__doortwolock___axiom
 use        Submarinesubsystem__submarine___axiom
 use        Submarinesubsystem__nuclearsubmarine___axiom

 let def #"submarinesubsystem.ads" 55 0 0#"W:diverges:N" "GP_Subp:submarinesubsystem.ads:55" 
   (__void_param : unit)
  requires { #"submarinesubsystem.ads" 55 0 0# true }
  ensures { #"submarinesubsystem.ads" 55 0 0# (#"submarinesubsystem.ads" 59 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarinesubsystem.ads:59:14" "GP_Id:5" "comment:     Post => NuclearSubmarine.LockingTwo = Locked;
             ^ submarinesubsystem.ads:59:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3496" "GP_Sloc:submarinesubsystem.ads:59:14" ((Submarinesubsystem__doortwolock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarinesubsystem.ads:55 *)
  ;
   assume {  (Submarinesubsystem__submarine___axiom.dynamic_invariant { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarinesubsystem.ads:55 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarinesubsystem.ads:55 *)
  ;
   abstract ensures {true}(let _ = ( ((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ((Submarinesubsystem__doortwolock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarinesubsystem.ads:55 *)
  ;
   assume {  ( ((Submarinesubsystem__airdoortwo__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 0) /\ ((Submarinesubsystem__doortwolock__rep.to_rep (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo (Submarinesubsystem__submarine.__split_fields { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:submarinesubsystem.adb:27:11" (#"submarinesubsystem.adb" 27 0 0# ()) );
   ( "GP_Sloc:submarinesubsystem.adb:27:7" (#"submarinesubsystem.adb" 27 0 0# (if (( ((Submarinesubsystem__airdoortwo__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__closingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) && ((Submarinesubsystem__doortwolock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 1) )) then (
    ( ( "GP_Sloc:submarinesubsystem.adb:29:10" (#"submarinesubsystem.adb" 29 0 0# ()) );
    ( "GP_Sloc:submarinesubsystem.adb:29:38" (#"submarinesubsystem.adb" 29 0 0# (let temp___220 = (let temp___219 = { Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content } in (
     ( #"submarinesubsystem.adb" 29 0 0# abstract ensures {true}(let _ = (Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo((Submarinesubsystem__submarine.__split_fields(temp___219)))) in (
      ()))
      end ;
     { ( temp___219 ) with Submarinesubsystem__submarine.__split_fields = { ( (Submarinesubsystem__submarine.__split_fields(temp___219)) ) with Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo = (Submarinesubsystem__doortwolock__rep.of_rep(0)) } } )))
     in (
     #"submarinesubsystem.adb" 29 0 0# Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content <- ( (Submarinesubsystem__submarine.__split_fields(temp___220)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarinesubsystem__doortwolock__rep.to_rep((Submarinesubsystem__submarine.rec__submarinesubsystem__submarine__lockingtwo((Submarinesubsystem__submarine.__split_fields({ Submarinesubsystem__submarine.__split_fields = Submarinesubsystem__nuclearsubmarine.nuclearsubmarine__split_fields.Submarinesubsystem__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end
